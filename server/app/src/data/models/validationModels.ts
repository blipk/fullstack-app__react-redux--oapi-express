/**
 * DO NOT MODIFY: Automatically generated by {@link generators/class-validator-generator}
 *
 *  Contains `class-validator` models generated from `sequelize` models in {@link data/models/models}
 *
 *  These are used as DTOs for the applications `tsoa` controllers.
 *
 *  Each DTO has a property `#shouldValidate` and a method `setShouldValidate`
 *   that are used for conditional validation in {@link responders/validationResponders.validator}
 * @module
 */

import { 
    IsInt, 
    IsUrl, 
    IsDate, 
    IsEmail, 
    IsString, 
    IsNumber, 
    MinLength, 
    MaxLength, 
    IsBoolean, 
    ValidateIf, 
    IsOptional, 
    IsNotEmpty
} from "class-validator"
import { registerDecorator, type ValidationOptions, type ValidationArguments } from "class-validator"

/** Custom `clas-validator` decorator to check if value is either a string or a Buffer */
export function IsStringOrBuffer( validationOptions?: ValidationOptions ) {
    return ( object: object, propertyName: string ): void => {
        registerDecorator( {
            name         : "isStringOrBuffer",
            target       : object.constructor,
            propertyName : propertyName,
            options      : validationOptions,
            validator    : {
                validate( value: unknown, _args: ValidationArguments ) {
                    return typeof value === "string" || Buffer.isBuffer( value ) // Check if value is a string or Buffer
                },
                defaultMessage( args: ValidationArguments ) {
                    return `${args.property} must be a string or a Buffer`
                },
            },
        } )
    }
}

/** Represents a non-empty string */
export type NonEmptyString<T extends string = string> = T extends "" ? never : T



/** DTO Model for Sequalize Model {@link data/models/models.AppModelNotAbstract} */
export class AppModelDTO {

    @ValidateIf( ( o: AppModelDTO ) => o.#shouldValidate.id )
    @IsInt()
    @IsOptional()
    declare id: number

    @ValidateIf( ( o: AppModelDTO ) => o.#shouldValidate.createdAt )
    @IsDate()
    @IsNotEmpty()
    declare createdAt: Date

    @ValidateIf( ( o: AppModelDTO ) => o.#shouldValidate.updatedAt )
    @IsDate()
    @IsNotEmpty()
    declare updatedAt: Date

    @ValidateIf( ( o: AppModelDTO ) => o.#shouldValidate.deletedAt )
    @IsDate()
    @IsOptional()
    declare deletedAt?: Date


    #shouldValidate: Record<string, boolean> = {
        "id"        : true,
        "createdAt" : true,
        "updatedAt" : true,
        "deletedAt" : true
    }

    setShouldValidate( key: string, value: boolean ): void { this.#shouldValidate[ key ] = value }
}


/** DTO Model for Sequalize Model {@link data/models/models.RoleModel} */
export class RoleModelDTO extends AppModelDTO {

    @ValidateIf( ( o: RoleModelDTO ) => o.#shouldValidate.name )
    @IsString()
    @IsNotEmpty()
    @MinLength( 1 )
    declare name: NonEmptyString

    @ValidateIf( ( o: RoleModelDTO ) => o.#shouldValidate.id )
    @IsInt()
    @IsOptional()
    declare id: number

    @ValidateIf( ( o: RoleModelDTO ) => o.#shouldValidate.createdAt )
    @IsDate()
    @IsNotEmpty()
    declare createdAt: Date

    @ValidateIf( ( o: RoleModelDTO ) => o.#shouldValidate.updatedAt )
    @IsDate()
    @IsNotEmpty()
    declare updatedAt: Date

    @ValidateIf( ( o: RoleModelDTO ) => o.#shouldValidate.deletedAt )
    @IsDate()
    @IsOptional()
    declare deletedAt?: Date


    #shouldValidate: Record<string, boolean> = {
        "name"      : true,
        "id"        : true,
        "createdAt" : true,
        "updatedAt" : true,
        "deletedAt" : true
    }

    setShouldValidate( key: string, value: boolean ): void { this.#shouldValidate[ key ] = value }
}


/** DTO Model for Sequalize Model {@link data/models/models.UserModel} */
export class UserModelDTO extends AppModelDTO {

    @ValidateIf( ( o: UserModelDTO ) => o.#shouldValidate.firstName )
    @IsString()
    @IsNotEmpty()
    @MinLength( 1 )
    declare firstName: NonEmptyString

    @ValidateIf( ( o: UserModelDTO ) => o.#shouldValidate.lastName )
    @IsString()
    @IsNotEmpty()
    @MinLength( 1 )
    declare lastName: NonEmptyString

    @ValidateIf( ( o: UserModelDTO ) => o.#shouldValidate.email )
    @IsString()
    @IsNotEmpty()
    @MinLength( 1 )
    @IsEmail()
    declare email: NonEmptyString

    @ValidateIf( ( o: UserModelDTO ) => o.#shouldValidate.password )
    @IsString()
    @IsNotEmpty()
    @MinLength( 1 )
    @MinLength( 8 )
    @MaxLength( 100 )
    declare password: NonEmptyString

    @ValidateIf( ( o: UserModelDTO ) => o.#shouldValidate.profileImageURL )
    @IsString()
    @IsOptional()
    @IsUrl()
    declare profileImageURL?: string

    @ValidateIf( ( o: UserModelDTO ) => o.#shouldValidate.profileText )
    @IsString()
    @IsOptional()
    declare profileText?: string

    @ValidateIf( ( o: UserModelDTO ) => o.#shouldValidate.fullName )
    @IsString()
    @IsOptional()
    declare fullName?: string

    @ValidateIf( ( o: UserModelDTO ) => o.#shouldValidate.isAdmin )
    @IsBoolean()
    @IsOptional()
    declare isAdmin?: boolean

    @ValidateIf( ( o: UserModelDTO ) => o.#shouldValidate.isStaff )
    @IsBoolean()
    @IsOptional()
    declare isStaff?: boolean

    @ValidateIf( ( o: UserModelDTO ) => o.#shouldValidate.id )
    @IsInt()
    @IsOptional()
    declare id: number

    @ValidateIf( ( o: UserModelDTO ) => o.#shouldValidate.createdAt )
    @IsDate()
    @IsNotEmpty()
    declare createdAt: Date

    @ValidateIf( ( o: UserModelDTO ) => o.#shouldValidate.updatedAt )
    @IsDate()
    @IsNotEmpty()
    declare updatedAt: Date

    @ValidateIf( ( o: UserModelDTO ) => o.#shouldValidate.deletedAt )
    @IsDate()
    @IsOptional()
    declare deletedAt?: Date


    #shouldValidate: Record<string, boolean> = {
        "firstName"       : true,
        "lastName"        : true,
        "email"           : true,
        "password"        : true,
        "profileImageURL" : true,
        "profileText"     : true,
        "fullName"        : true,
        "isAdmin"         : true,
        "isStaff"         : true,
        "id"              : true,
        "createdAt"       : true,
        "updatedAt"       : true,
        "deletedAt"       : true
    }

    setShouldValidate( key: string, value: boolean ): void { this.#shouldValidate[ key ] = value }
}


/** DTO Model for Sequalize Model {@link data/models/models.TagModel} */
export class TagModelDTO extends AppModelDTO {

    @ValidateIf( ( o: TagModelDTO ) => o.#shouldValidate.name )
    @IsString()
    @IsNotEmpty()
    @MinLength( 1 )
    declare name: NonEmptyString

    @ValidateIf( ( o: TagModelDTO ) => o.#shouldValidate.cssColour )
    @IsString()
    @IsNotEmpty()
    @MinLength( 1 )
    declare cssColour: NonEmptyString

    @ValidateIf( ( o: TagModelDTO ) => o.#shouldValidate.id )
    @IsInt()
    @IsOptional()
    declare id: number

    @ValidateIf( ( o: TagModelDTO ) => o.#shouldValidate.createdAt )
    @IsDate()
    @IsNotEmpty()
    declare createdAt: Date

    @ValidateIf( ( o: TagModelDTO ) => o.#shouldValidate.updatedAt )
    @IsDate()
    @IsNotEmpty()
    declare updatedAt: Date

    @ValidateIf( ( o: TagModelDTO ) => o.#shouldValidate.deletedAt )
    @IsDate()
    @IsOptional()
    declare deletedAt?: Date


    #shouldValidate: Record<string, boolean> = {
        "name"      : true,
        "cssColour" : true,
        "id"        : true,
        "createdAt" : true,
        "updatedAt" : true,
        "deletedAt" : true
    }

    setShouldValidate( key: string, value: boolean ): void { this.#shouldValidate[ key ] = value }
}


/** DTO Model for Sequalize Model {@link data/models/models.BlogModel} */
export class BlogModelDTO extends AppModelDTO {

    @ValidateIf( ( o: BlogModelDTO ) => o.#shouldValidate.title )
    @IsString()
    @IsNotEmpty()
    @MinLength( 1 )
    declare title: NonEmptyString

    @ValidateIf( ( o: BlogModelDTO ) => o.#shouldValidate.imageURL )
    @IsString()
    @IsOptional()
    @MinLength( 1 )
    @IsUrl()
    declare imageURL?: NonEmptyString

    @ValidateIf( ( o: BlogModelDTO ) => o.#shouldValidate.content )
    @IsString()
    @IsNotEmpty()
    @MinLength( 1 )
    declare content: NonEmptyString

    @ValidateIf( ( o: BlogModelDTO ) => o.#shouldValidate.isPublished )
    @IsBoolean()
    @IsNotEmpty()
    declare isPublished: boolean

    @ValidateIf( ( o: BlogModelDTO ) => o.#shouldValidate.publishedDate )
    @IsDate()
    @IsOptional()
    declare publishedDate?: Date

    @ValidateIf( ( o: BlogModelDTO ) => o.#shouldValidate.userId )
    @IsInt()
    @IsOptional()
    declare userId: number

    @ValidateIf( ( o: BlogModelDTO ) => o.#shouldValidate.id )
    @IsInt()
    @IsOptional()
    declare id: number

    @ValidateIf( ( o: BlogModelDTO ) => o.#shouldValidate.createdAt )
    @IsDate()
    @IsNotEmpty()
    declare createdAt: Date

    @ValidateIf( ( o: BlogModelDTO ) => o.#shouldValidate.updatedAt )
    @IsDate()
    @IsNotEmpty()
    declare updatedAt: Date

    @ValidateIf( ( o: BlogModelDTO ) => o.#shouldValidate.deletedAt )
    @IsDate()
    @IsOptional()
    declare deletedAt?: Date

    @ValidateIf( ( o: BlogModelDTO ) => o.#shouldValidate.user )
    declare user?: UserModelDTO

    @ValidateIf( ( o: BlogModelDTO ) => o.#shouldValidate.tags )
    declare tags?: TagModelDTO[]


    #shouldValidate: Record<string, boolean> = {
        "title"         : true,
        "imageURL"      : true,
        "content"       : true,
        "isPublished"   : true,
        "publishedDate" : true,
        "userId"        : true,
        "id"            : true,
        "createdAt"     : true,
        "updatedAt"     : true,
        "deletedAt"     : true,
        "user"          : true,
        "tags"          : true
    }

    setShouldValidate( key: string, value: boolean ): void { this.#shouldValidate[ key ] = value }
}


/** DTO Model for Sequalize Model {@link data/models/models.FeedbackModel} */
export class FeedbackModelDTO extends AppModelDTO {

    @ValidateIf( ( o: FeedbackModelDTO ) => o.#shouldValidate.authorName )
    @IsString()
    @IsOptional()
    declare authorName?: string

    @ValidateIf( ( o: FeedbackModelDTO ) => o.#shouldValidate.title )
    @IsString()
    @IsNotEmpty()
    @MinLength( 1 )
    declare title: NonEmptyString

    @ValidateIf( ( o: FeedbackModelDTO ) => o.#shouldValidate.content )
    @IsString()
    @IsNotEmpty()
    @MinLength( 1 )
    declare content: NonEmptyString

    @ValidateIf( ( o: FeedbackModelDTO ) => o.#shouldValidate.isPublic )
    @IsBoolean()
    @IsNotEmpty()
    declare isPublic: boolean

    @ValidateIf( ( o: FeedbackModelDTO ) => o.#shouldValidate.userId )
    @IsInt()
    @IsOptional()
    declare userId?: number

    @ValidateIf( ( o: FeedbackModelDTO ) => o.#shouldValidate.id )
    @IsInt()
    @IsOptional()
    declare id: number

    @ValidateIf( ( o: FeedbackModelDTO ) => o.#shouldValidate.createdAt )
    @IsDate()
    @IsNotEmpty()
    declare createdAt: Date

    @ValidateIf( ( o: FeedbackModelDTO ) => o.#shouldValidate.updatedAt )
    @IsDate()
    @IsNotEmpty()
    declare updatedAt: Date

    @ValidateIf( ( o: FeedbackModelDTO ) => o.#shouldValidate.deletedAt )
    @IsDate()
    @IsOptional()
    declare deletedAt?: Date

    @ValidateIf( ( o: FeedbackModelDTO ) => o.#shouldValidate.user )
    declare user?: UserModelDTO


    #shouldValidate: Record<string, boolean> = {
        "authorName" : true,
        "title"      : true,
        "content"    : true,
        "isPublic"   : true,
        "userId"     : true,
        "id"         : true,
        "createdAt"  : true,
        "updatedAt"  : true,
        "deletedAt"  : true,
        "user"       : true
    }

    setShouldValidate( key: string, value: boolean ): void { this.#shouldValidate[ key ] = value }
}


/** DTO Model for Sequalize Model {@link data/models/models.BookingModel} */
export class BookingModelDTO extends AppModelDTO {

    @ValidateIf( ( o: BookingModelDTO ) => o.#shouldValidate.bookingDate )
    @IsDate()
    @IsOptional()
    declare bookingDate: Date

    @ValidateIf( ( o: BookingModelDTO ) => o.#shouldValidate.bookingNotes )
    @IsString()
    @IsOptional()
    declare bookingNotes?: string

    @ValidateIf( ( o: BookingModelDTO ) => o.#shouldValidate.userId )
    @IsInt()
    @IsOptional()
    declare userId: number

    @ValidateIf( ( o: BookingModelDTO ) => o.#shouldValidate.bookingTypeId )
    @IsInt()
    @IsNotEmpty()
    declare bookingTypeId: number

    @ValidateIf( ( o: BookingModelDTO ) => o.#shouldValidate.id )
    @IsInt()
    @IsOptional()
    declare id: number

    @ValidateIf( ( o: BookingModelDTO ) => o.#shouldValidate.createdAt )
    @IsDate()
    @IsNotEmpty()
    declare createdAt: Date

    @ValidateIf( ( o: BookingModelDTO ) => o.#shouldValidate.updatedAt )
    @IsDate()
    @IsNotEmpty()
    declare updatedAt: Date

    @ValidateIf( ( o: BookingModelDTO ) => o.#shouldValidate.deletedAt )
    @IsDate()
    @IsOptional()
    declare deletedAt?: Date

    @ValidateIf( ( o: BookingModelDTO ) => o.#shouldValidate.user )
    declare user?: UserModelDTO

    @ValidateIf( ( o: BookingModelDTO ) => o.#shouldValidate.bookingType )
    declare bookingType?: BookingTypeModelDTO


    #shouldValidate: Record<string, boolean> = {
        "bookingDate"   : true,
        "bookingNotes"  : true,
        "userId"        : true,
        "bookingTypeId" : true,
        "id"            : true,
        "createdAt"     : true,
        "updatedAt"     : true,
        "deletedAt"     : true,
        "user"          : true,
        "bookingType"   : true
    }

    setShouldValidate( key: string, value: boolean ): void { this.#shouldValidate[ key ] = value }
}


/** DTO Model for Sequalize Model {@link data/models/models.BookingTypeModel} */
export class BookingTypeModelDTO extends AppModelDTO {

    @ValidateIf( ( o: BookingTypeModelDTO ) => o.#shouldValidate.name )
    @IsString()
    @IsNotEmpty()
    @MinLength( 1 )
    declare name: NonEmptyString

    @ValidateIf( ( o: BookingTypeModelDTO ) => o.#shouldValidate.description )
    @IsString()
    @IsNotEmpty()
    @MinLength( 1 )
    declare description: NonEmptyString

    @ValidateIf( ( o: BookingTypeModelDTO ) => o.#shouldValidate.price )
    @IsNumber()
    @IsNotEmpty()
    declare price: number

    @ValidateIf( ( o: BookingTypeModelDTO ) => o.#shouldValidate.id )
    @IsInt()
    @IsOptional()
    declare id: number

    @ValidateIf( ( o: BookingTypeModelDTO ) => o.#shouldValidate.createdAt )
    @IsDate()
    @IsNotEmpty()
    declare createdAt: Date

    @ValidateIf( ( o: BookingTypeModelDTO ) => o.#shouldValidate.updatedAt )
    @IsDate()
    @IsNotEmpty()
    declare updatedAt: Date

    @ValidateIf( ( o: BookingTypeModelDTO ) => o.#shouldValidate.deletedAt )
    @IsDate()
    @IsOptional()
    declare deletedAt?: Date


    #shouldValidate: Record<string, boolean> = {
        "name"        : true,
        "description" : true,
        "price"       : true,
        "id"          : true,
        "createdAt"   : true,
        "updatedAt"   : true,
        "deletedAt"   : true
    }

    setShouldValidate( key: string, value: boolean ): void { this.#shouldValidate[ key ] = value }
}
