// This file is auto-generated by @hey-api/openapi-ts

import { createClient, createConfig, type Options } from '@hey-api/client-axios';
import { type GetAllUsersData, type GetAllUsersError, type GetAllUsersResponse, type CreateUserData, type CreateUserError, type CreateUserResponse, type GetUserData, type GetUserError, type GetUserResponse, type UpdateUserData, type UpdateUserError, type UpdateUserResponse, type DeleteUserData, type DeleteUserError, type DeleteUserResponse, GetAllUsersResponseTransformer, CreateUserResponseTransformer, GetUserResponseTransformer, UpdateUserResponseTransformer, type LoginData, type LoginError, type LoginResponse, type RegisterData, type RegisterError, type RegisterResponse, LoginResponseTransformer, RegisterResponseTransformer, type GetAllTagsData, type GetAllTagsError, type GetAllTagsResponse, type CreateTagData, type CreateTagError, type CreateTagResponse, type GetTagData, type GetTagError, type GetTagResponse, type UpdateTagData, type UpdateTagError, type UpdateTagResponse, type DeleteTagData, type DeleteTagError, type DeleteTagResponse, GetAllTagsResponseTransformer, CreateTagResponseTransformer, GetTagResponseTransformer, UpdateTagResponseTransformer, type GetAllRolesData, type GetAllRolesError, type GetAllRolesResponse, type CreateRoleData, type CreateRoleError, type CreateRoleResponse, type GetRoleData, type GetRoleError, type GetRoleResponse, type UpdateRoleData, type UpdateRoleError, type UpdateRoleResponse, type DeleteRoleData, type DeleteRoleError, type DeleteRoleResponse, GetAllRolesResponseTransformer, CreateRoleResponseTransformer, GetRoleResponseTransformer, UpdateRoleResponseTransformer, type GetAllFeedbacksData, type GetAllFeedbacksError, type GetAllFeedbacksResponse, type CreateFeedbackData, type CreateFeedbackError, type CreateFeedbackResponse, type GetFeedbackData, type GetFeedbackError, type GetFeedbackResponse, type UpdateFeedbackData, type UpdateFeedbackError, type UpdateFeedbackResponse, type DeleteFeedbackData, type DeleteFeedbackError, type DeleteFeedbackResponse, GetAllFeedbacksResponseTransformer, CreateFeedbackResponseTransformer, GetFeedbackResponseTransformer, UpdateFeedbackResponseTransformer, type GetAllBookingTypesData, type GetAllBookingTypesError, type GetAllBookingTypesResponse, type CreateBookingTypeData, type CreateBookingTypeError, type CreateBookingTypeResponse, type GetBookingTypeData, type GetBookingTypeError, type GetBookingTypeResponse, type UpdateBookingTypeData, type UpdateBookingTypeError, type UpdateBookingTypeResponse, type DeleteBookingTypeData, type DeleteBookingTypeError, type DeleteBookingTypeResponse, GetAllBookingTypesResponseTransformer, CreateBookingTypeResponseTransformer, GetBookingTypeResponseTransformer, UpdateBookingTypeResponseTransformer, type GetAllBookingsData, type GetAllBookingsError, type GetAllBookingsResponse, type CreateBookingData, type CreateBookingError, type CreateBookingResponse, type GetBookingData, type GetBookingError, type GetBookingResponse, type UpdateBookingData, type UpdateBookingError, type UpdateBookingResponse, type DeleteBookingData, type DeleteBookingError, type DeleteBookingResponse, GetAllBookingsResponseTransformer, CreateBookingResponseTransformer, GetBookingResponseTransformer, UpdateBookingResponseTransformer, type GetAllBlogsData, type GetAllBlogsError, type GetAllBlogsResponse, type CreateBlogData, type CreateBlogError, type CreateBlogResponse, type GetBlogData, type GetBlogError, type GetBlogResponse, type UpdateBlogData, type UpdateBlogError, type UpdateBlogResponse, type DeleteBlogData, type DeleteBlogError, type DeleteBlogResponse, GetAllBlogsResponseTransformer, CreateBlogResponseTransformer, GetBlogResponseTransformer, UpdateBlogResponseTransformer } from './types.gen';

export const client = createClient(createConfig());

export class UserService {
    /**
     * Retrieves a list of all users, matching the query parameters if provided.
     */
    public static getAllUsers<ThrowOnError extends boolean = false>(options?: Options<GetAllUsersData, ThrowOnError>) {
        return (options?.client ?? client).get<GetAllUsersResponse, GetAllUsersError, ThrowOnError>({
            ...options,
            url: '/users',
            responseTransformer: GetAllUsersResponseTransformer
        });
    }

    /**
     * Creates a new user
     */
    public static createUser<ThrowOnError extends boolean = false>(options: Options<CreateUserData, ThrowOnError>) {
        return (options?.client ?? client).post<CreateUserResponse, CreateUserError, ThrowOnError>({
            ...options,
            url: '/users',
            responseTransformer: CreateUserResponseTransformer
        });
    }

    /**
     * Retrieves the details of an existing user with a matching id
     */
    public static getUser<ThrowOnError extends boolean = false>(options: Options<GetUserData, ThrowOnError>) {
        return (options?.client ?? client).get<GetUserResponse, GetUserError, ThrowOnError>({
            ...options,
            url: '/users/{id}',
            responseTransformer: GetUserResponseTransformer
        });
    }

    /**
     * Update a user with a matching id
     */
    public static updateUser<ThrowOnError extends boolean = false>(options: Options<UpdateUserData, ThrowOnError>) {
        return (options?.client ?? client).patch<UpdateUserResponse, UpdateUserError, ThrowOnError>({
            ...options,
            url: '/users/{id}',
            responseTransformer: UpdateUserResponseTransformer
        });
    }

    /**
     * Delete the user with the matching id
     */
    public static deleteUser<ThrowOnError extends boolean = false>(options: Options<DeleteUserData, ThrowOnError>) {
        return (options?.client ?? client).delete<DeleteUserResponse, DeleteUserError, ThrowOnError>({
            ...options,
            url: '/users/{id}'
        });
    }

}

export class AuthService {
    /**
     * This route handles auth login attempts
     */
    public static login<ThrowOnError extends boolean = false>(options: Options<LoginData, ThrowOnError>) {
        return (options?.client ?? client).post<LoginResponse, LoginError, ThrowOnError>({
            ...options,
            url: '/auth/login',
            responseTransformer: LoginResponseTransformer
        });
    }

    /**
     * This route handles auth registration attempts
     */
    public static register<ThrowOnError extends boolean = false>(options: Options<RegisterData, ThrowOnError>) {
        return (options?.client ?? client).post<RegisterResponse, RegisterError, ThrowOnError>({
            ...options,
            url: '/auth/register',
            responseTransformer: RegisterResponseTransformer
        });
    }

}

export class TagService {
    /**
     * Retrieves a list of all tags, matching the query parameters if provided.
     */
    public static getAllTags<ThrowOnError extends boolean = false>(options?: Options<GetAllTagsData, ThrowOnError>) {
        return (options?.client ?? client).get<GetAllTagsResponse, GetAllTagsError, ThrowOnError>({
            ...options,
            url: '/tags',
            responseTransformer: GetAllTagsResponseTransformer
        });
    }

    /**
     * Creates a new tag
     */
    public static createTag<ThrowOnError extends boolean = false>(options: Options<CreateTagData, ThrowOnError>) {
        return (options?.client ?? client).post<CreateTagResponse, CreateTagError, ThrowOnError>({
            ...options,
            url: '/tags',
            responseTransformer: CreateTagResponseTransformer
        });
    }

    /**
     * Retrieves the details of an existing tag with a matching id
     */
    public static getTag<ThrowOnError extends boolean = false>(options: Options<GetTagData, ThrowOnError>) {
        return (options?.client ?? client).get<GetTagResponse, GetTagError, ThrowOnError>({
            ...options,
            url: '/tags/{id}',
            responseTransformer: GetTagResponseTransformer
        });
    }

    /**
     * Update a tag with a matching id
     */
    public static updateTag<ThrowOnError extends boolean = false>(options: Options<UpdateTagData, ThrowOnError>) {
        return (options?.client ?? client).patch<UpdateTagResponse, UpdateTagError, ThrowOnError>({
            ...options,
            url: '/tags/{id}',
            responseTransformer: UpdateTagResponseTransformer
        });
    }

    /**
     * Delete the tag with the matching id
     */
    public static deleteTag<ThrowOnError extends boolean = false>(options: Options<DeleteTagData, ThrowOnError>) {
        return (options?.client ?? client).delete<DeleteTagResponse, DeleteTagError, ThrowOnError>({
            ...options,
            url: '/tags/{id}'
        });
    }

}

export class RoleService {
    /**
     * Retrieves a list of all roles, matching the query parameters if provided.
     */
    public static getAllRoles<ThrowOnError extends boolean = false>(options?: Options<GetAllRolesData, ThrowOnError>) {
        return (options?.client ?? client).get<GetAllRolesResponse, GetAllRolesError, ThrowOnError>({
            ...options,
            url: '/roles',
            responseTransformer: GetAllRolesResponseTransformer
        });
    }

    /**
     * Creates a new role
     */
    public static createRole<ThrowOnError extends boolean = false>(options: Options<CreateRoleData, ThrowOnError>) {
        return (options?.client ?? client).post<CreateRoleResponse, CreateRoleError, ThrowOnError>({
            ...options,
            url: '/roles',
            responseTransformer: CreateRoleResponseTransformer
        });
    }

    /**
     * Retrieves the details of an existing role with a matching id
     */
    public static getRole<ThrowOnError extends boolean = false>(options: Options<GetRoleData, ThrowOnError>) {
        return (options?.client ?? client).get<GetRoleResponse, GetRoleError, ThrowOnError>({
            ...options,
            url: '/roles/{id}',
            responseTransformer: GetRoleResponseTransformer
        });
    }

    /**
     * Update a role with a matching id
     */
    public static updateRole<ThrowOnError extends boolean = false>(options: Options<UpdateRoleData, ThrowOnError>) {
        return (options?.client ?? client).patch<UpdateRoleResponse, UpdateRoleError, ThrowOnError>({
            ...options,
            url: '/roles/{id}',
            responseTransformer: UpdateRoleResponseTransformer
        });
    }

    /**
     * Delete the role with the matching id
     */
    public static deleteRole<ThrowOnError extends boolean = false>(options: Options<DeleteRoleData, ThrowOnError>) {
        return (options?.client ?? client).delete<DeleteRoleResponse, DeleteRoleError, ThrowOnError>({
            ...options,
            url: '/roles/{id}'
        });
    }

}

export class FeedbackService {
    /**
     * Retrieves a list of all feedbacks, matching the query parameters if provided.
     */
    public static getAllFeedbacks<ThrowOnError extends boolean = false>(options?: Options<GetAllFeedbacksData, ThrowOnError>) {
        return (options?.client ?? client).get<GetAllFeedbacksResponse, GetAllFeedbacksError, ThrowOnError>({
            ...options,
            url: '/feedbacks',
            responseTransformer: GetAllFeedbacksResponseTransformer
        });
    }

    /**
     * Creates a new feedback
     */
    public static createFeedback<ThrowOnError extends boolean = false>(options: Options<CreateFeedbackData, ThrowOnError>) {
        return (options?.client ?? client).post<CreateFeedbackResponse, CreateFeedbackError, ThrowOnError>({
            ...options,
            url: '/feedbacks',
            responseTransformer: CreateFeedbackResponseTransformer
        });
    }

    /**
     * Retrieves the details of an existing feedback with a matching id
     */
    public static getFeedback<ThrowOnError extends boolean = false>(options: Options<GetFeedbackData, ThrowOnError>) {
        return (options?.client ?? client).get<GetFeedbackResponse, GetFeedbackError, ThrowOnError>({
            ...options,
            url: '/feedbacks/{id}',
            responseTransformer: GetFeedbackResponseTransformer
        });
    }

    /**
     * Update a feedback with a matching id
     */
    public static updateFeedback<ThrowOnError extends boolean = false>(options: Options<UpdateFeedbackData, ThrowOnError>) {
        return (options?.client ?? client).patch<UpdateFeedbackResponse, UpdateFeedbackError, ThrowOnError>({
            ...options,
            url: '/feedbacks/{id}',
            responseTransformer: UpdateFeedbackResponseTransformer
        });
    }

    /**
     * Delete the feedback with the matching id
     */
    public static deleteFeedback<ThrowOnError extends boolean = false>(options: Options<DeleteFeedbackData, ThrowOnError>) {
        return (options?.client ?? client).delete<DeleteFeedbackResponse, DeleteFeedbackError, ThrowOnError>({
            ...options,
            url: '/feedbacks/{id}'
        });
    }

}

export class BookingTypeService {
    /**
     * Retrieves a list of all bookingTypes, matching the query parameters if provided.
     */
    public static getAllBookingTypes<ThrowOnError extends boolean = false>(options?: Options<GetAllBookingTypesData, ThrowOnError>) {
        return (options?.client ?? client).get<GetAllBookingTypesResponse, GetAllBookingTypesError, ThrowOnError>({
            ...options,
            url: '/bookingTypes',
            responseTransformer: GetAllBookingTypesResponseTransformer
        });
    }

    /**
     * Creates a new bookingType
     */
    public static createBookingType<ThrowOnError extends boolean = false>(options: Options<CreateBookingTypeData, ThrowOnError>) {
        return (options?.client ?? client).post<CreateBookingTypeResponse, CreateBookingTypeError, ThrowOnError>({
            ...options,
            url: '/bookingTypes',
            responseTransformer: CreateBookingTypeResponseTransformer
        });
    }

    /**
     * Retrieves the details of an existing bookingType with a matching id
     */
    public static getBookingType<ThrowOnError extends boolean = false>(options: Options<GetBookingTypeData, ThrowOnError>) {
        return (options?.client ?? client).get<GetBookingTypeResponse, GetBookingTypeError, ThrowOnError>({
            ...options,
            url: '/bookingTypes/{id}',
            responseTransformer: GetBookingTypeResponseTransformer
        });
    }

    /**
     * Update a bookingType with a matching id
     */
    public static updateBookingType<ThrowOnError extends boolean = false>(options: Options<UpdateBookingTypeData, ThrowOnError>) {
        return (options?.client ?? client).patch<UpdateBookingTypeResponse, UpdateBookingTypeError, ThrowOnError>({
            ...options,
            url: '/bookingTypes/{id}',
            responseTransformer: UpdateBookingTypeResponseTransformer
        });
    }

    /**
     * Delete the bookingType with the matching id
     */
    public static deleteBookingType<ThrowOnError extends boolean = false>(options: Options<DeleteBookingTypeData, ThrowOnError>) {
        return (options?.client ?? client).delete<DeleteBookingTypeResponse, DeleteBookingTypeError, ThrowOnError>({
            ...options,
            url: '/bookingTypes/{id}'
        });
    }

}

export class BookingService {
    /**
     * Retrieves a list of all bookings, matching the query parameters if provided.
     */
    public static getAllBookings<ThrowOnError extends boolean = false>(options?: Options<GetAllBookingsData, ThrowOnError>) {
        return (options?.client ?? client).get<GetAllBookingsResponse, GetAllBookingsError, ThrowOnError>({
            ...options,
            url: '/bookings',
            responseTransformer: GetAllBookingsResponseTransformer
        });
    }

    /**
     * Creates a new booking
     */
    public static createBooking<ThrowOnError extends boolean = false>(options: Options<CreateBookingData, ThrowOnError>) {
        return (options?.client ?? client).post<CreateBookingResponse, CreateBookingError, ThrowOnError>({
            ...options,
            url: '/bookings',
            responseTransformer: CreateBookingResponseTransformer
        });
    }

    /**
     * Retrieves the details of an existing booking with a matching id
     */
    public static getBooking<ThrowOnError extends boolean = false>(options: Options<GetBookingData, ThrowOnError>) {
        return (options?.client ?? client).get<GetBookingResponse, GetBookingError, ThrowOnError>({
            ...options,
            url: '/bookings/{id}',
            responseTransformer: GetBookingResponseTransformer
        });
    }

    /**
     * Update a booking with a matching id
     */
    public static updateBooking<ThrowOnError extends boolean = false>(options: Options<UpdateBookingData, ThrowOnError>) {
        return (options?.client ?? client).patch<UpdateBookingResponse, UpdateBookingError, ThrowOnError>({
            ...options,
            url: '/bookings/{id}',
            responseTransformer: UpdateBookingResponseTransformer
        });
    }

    /**
     * Delete the booking with the matching id
     */
    public static deleteBooking<ThrowOnError extends boolean = false>(options: Options<DeleteBookingData, ThrowOnError>) {
        return (options?.client ?? client).delete<DeleteBookingResponse, DeleteBookingError, ThrowOnError>({
            ...options,
            url: '/bookings/{id}'
        });
    }

}

export class BlogService {
    /**
     * Retrieves a list of all blogs, matching the query parameters if provided.
     */
    public static getAllBlogs<ThrowOnError extends boolean = false>(options?: Options<GetAllBlogsData, ThrowOnError>) {
        return (options?.client ?? client).get<GetAllBlogsResponse, GetAllBlogsError, ThrowOnError>({
            ...options,
            url: '/blogs',
            responseTransformer: GetAllBlogsResponseTransformer
        });
    }

    /**
     * Creates a new blog
     */
    public static createBlog<ThrowOnError extends boolean = false>(options: Options<CreateBlogData, ThrowOnError>) {
        return (options?.client ?? client).post<CreateBlogResponse, CreateBlogError, ThrowOnError>({
            ...options,
            url: '/blogs',
            responseTransformer: CreateBlogResponseTransformer
        });
    }

    /**
     * Retrieves the details of an existing blog with a matching id
     */
    public static getBlog<ThrowOnError extends boolean = false>(options: Options<GetBlogData, ThrowOnError>) {
        return (options?.client ?? client).get<GetBlogResponse, GetBlogError, ThrowOnError>({
            ...options,
            url: '/blogs/{id}',
            responseTransformer: GetBlogResponseTransformer
        });
    }

    /**
     * Update a blog with a matching id
     */
    public static updateBlog<ThrowOnError extends boolean = false>(options: Options<UpdateBlogData, ThrowOnError>) {
        return (options?.client ?? client).patch<UpdateBlogResponse, UpdateBlogError, ThrowOnError>({
            ...options,
            url: '/blogs/{id}',
            responseTransformer: UpdateBlogResponseTransformer
        });
    }

    /**
     * Delete the blog with the matching id
     */
    public static deleteBlog<ThrowOnError extends boolean = false>(options: Options<DeleteBlogData, ThrowOnError>) {
        return (options?.client ?? client).delete<DeleteBlogResponse, DeleteBlogError, ThrowOnError>({
            ...options,
            url: '/blogs/{id}'
        });
    }

}