/**
 * This file generates files containing Redux slices/reducers for each service class generated by
 * `@hey-api/client-axios` from the server database and DTO model schemas in the OpenAPI json file.
 *
 * @module
 */
import fs from "fs"
import path from "path"

import { getAppRoot } from "../utils/utils.ts"
import { ensureDevMode } from "../config/config.ts"
import { getClassInfo } from "../utils/tsUtils.ts"

ensureDevMode()


/**
 * Generates Redux slice/reducer files from the `@hey-api-client-axios` generated service classes.
 * The generated files use {@link store/storeUtils/sliceFactory} for a standardised state data and management interface.
 *
 * @param servicesFile - The services file generated by `@hey-api-client-axios`
 * @param sliceTemplateFile - The template slice file
 * @param slicesOutputDir  - The directory to save the output slice files
 * @param excludeServices - A list of generated service class names to not generate slices for
 */
const generateSlices = (
    servicesFile: string,
    sliceTemplateFile: string,
    slicesOutputDir: string,
    excludeServices?: string[]
): void => {
    console.log( "Generating slices..." )

    const sliceTemplateFileContents = fs.readFileSync( sliceTemplateFile )

    const sliceTemplateName = sliceTemplateFileContents
        .toString()
        .split( "} from \"../../api-client/services.gen.ts\"" )[ 0 ]
        .split( "import { " )[ 1 ]
        .trim()
        .replace( "Service", "" )

    const [ first, ...rest ] = sliceTemplateName
    const camelCaseSliceTemplateName = first.toLowerCase() + rest.join( "" )

    excludeServices ??= []
    excludeServices = excludeServices.map( serviceClassName => serviceClassName.toLowerCase() )
    const serviceClassNames = getClassInfo( servicesFile )
        .map( classInfo => classInfo.name )
        .filter( className =>
            !excludeServices.includes( className.toLowerCase() ) && !excludeServices.includes( className.replace( "Service", "" ).toLowerCase() )
        )

    console.log( sliceTemplateName, serviceClassNames )

    for ( const serviceClassName of serviceClassNames ) {
        const newSliceName = serviceClassName.replace( "Service", "" )

        const [ first, ...rest ] = newSliceName
        const camelCaseNewSliceName = first.toLowerCase() + rest.join( "" )

        const newSliceFileContents  = sliceTemplateFileContents
            .toString()
            // Change the name
            .replaceAll( sliceTemplateName, newSliceName )
            .replaceAll( camelCaseSliceTemplateName, camelCaseNewSliceName )
            .replaceAll( sliceTemplateName.toLowerCase(), newSliceName.toLowerCase() )
            // Update imports for the subdir
            .replaceAll( "from \"../", "from \"../../" )

        if ( !fs.existsSync( slicesOutputDir ) )
            fs.mkdirSync( slicesOutputDir )

        const sliceOutputPath = path.join( slicesOutputDir, `${camelCaseNewSliceName}Slice.ts` )

        fs.writeFileSync( sliceOutputPath, newSliceFileContents )

        console.log( `Slice saved to ${sliceOutputPath}` )
    }

    console.log( "Slice generation complete" )

}


const appRoot = getAppRoot( import.meta.dirname )
const isRunDirectly = import.meta.filename.includes( process.argv[ 1 ] )
if ( isRunDirectly )
    generateSlices(
        path.join( appRoot, "src/api-client/services.gen.ts" ),
        path.join( appRoot, "src/store/reducers/template-slice.ts" ),
        path.join( appRoot, "src/store/reducers/generated/" ),
        [ "AuthService" ]
    )


export { generateSlices }