
include /etc/nginx/conf.d/env_vars.conf;

server {
  resolver 127.0.0.11 valid=30s ipv6=off; # Docker resolver

  # HTTP Redirect server
  listen 80 default_server;
  listen [::]:80 default_server;
  server_name localhost; #TODO add any hosts the server will be on here

  # SSL renewal
  # location /.well-known/acme-challenge/ {
  #   set $upstream zerossl;
  #   proxy_redirect off;
  #   proxy_pass http://$upstream:80;
  #   proxy_set_header Host               $host;
  #   proxy_set_header X-Forwarded-Host   $host;
  #   proxy_set_header X-Forwarded-For    $remote_addr;
  #   proxy_set_header X-Forwarded-Proto  https;
  # }

  # Redirect to HTTPS
  location / {
    return 301 https://$host$request_uri;
  }
}

server {
  resolver 127.0.0.11 valid=30s ipv6=off; # Docker resolver

  listen *:443 default_server ssl;
  server_name localhost;  #TODO add any hosts the server will be on here

  # Security - self-signed SSL for dev
  ssl_certificate /etc/nginx/certs/self-signed-localhost.crt;
  ssl_certificate_key /etc/nginx/certs/self-signed-localhost.key;

  # Security headers
  # include /etc/nginx/snippets/security-headers.conf;
  # add_header Strict-Transport-Security "max-age=900; includeSubdomains; preload";
  #access_log  /var/log/nginx/host.access.log  main;

  # Options
  root /var/www/html;


  # Add index.php to the list if you are using PHP
  # index index.html index.htm index.nginx-debian.html;
  location / {
    # First attempt to serve request as file, then
    # as directory, then fall back to displaying a 404.
    # try_files $uri $uri/ =404;

    try_files $uri $uri/ /; # Let react-router-dom handle the 404 pages
  }

  # AWS ELB
  location /elb-status {
    access_log off;
    return 200;
  }

  client_max_body_size 200M;
  client_body_buffer_size 100M;

  # Remove any CORS headers from upstream
  proxy_hide_header Access-Control-Allow-Origin;
  proxy_hide_header Access-Control-Allow-Credentials;

  # API Server
  location /api/ {
    proxy_pass http://server:$api_port;
    proxy_http_version 1.1;
    proxy_redirect off;
    proxy_set_header Host               $host;
    proxy_set_header X-Real-IP          $remote_addr;
    proxy_set_header X-Forwarded-For    $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto  $scheme;
    proxy_set_header Upgrade            $http_upgrade;
    proxy_set_header Connection         "upgrade";
    rewrite ^/api/(.*)$ /$1 break;

    # Only 1 origin allowed
    add_header 'Access-Control-Allow-Origin' 'http://localhost:5173' always;
    add_header 'Access-Control-Allow-Credentials' 'true' always;
    add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS' always;
    add_header 'Access-Control-Allow-Headers' 'Authorization,Content-Type,Accept,Origin,User-Agent,DNT,Cache-Control,X-Mx-ReqToken,Keep-Alive,X-Requested-With,If-Modified-Since' always;

    if ($request_method = 'OPTIONS') {
      # Only 1 origin allowed
      add_header 'Access-Control-Allow-Origin' 'http://localhost:5173' always;
      add_header 'Access-Control-Allow-Credentials' 'true' always;
      add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS' always;
      add_header 'Access-Control-Allow-Headers' 'Authorization,Content-Type,Accept,Origin,User-Agent,DNT,Cache-Control,X-Mx-ReqToken,Keep-Alive,X-Requested-With,If-Modified-Since' always;
      add_header 'Content-Length' 0;
      add_header 'Content-Type' 'text/plain charset=UTF-8';
      return 204;
    }
  }
}